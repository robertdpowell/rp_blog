<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://localhost:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.6.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-10-21T07:29:11+01:00</updated><id>http://localhost:4000/</id><entry><title type="html">6 Myths of Product Development</title><link href="http://localhost:4000/Six-Myths-of-Product-Development/" rel="alternate" type="text/html" title="6 Myths of Product Development" /><published>2020-10-19T00:00:00+01:00</published><updated>2020-10-19T00:00:00+01:00</updated><id>http://localhost:4000/ Six Myths of Product Development</id><content type="html" xml:base="http://localhost:4000/Six-Myths-of-Product-Development/">&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Product development is not analogous to manufacturing&lt;/strong&gt; - tasks are (mostly) highly variable and not predictable. Adopting a factory approach to product development is counter-productive.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Product quality decreases when resource utilisation is pushed close to 100% by management. &lt;strong&gt;Managers don’t appreciate the negative impact of high utilisation&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;High utilisation leads to queues which affect economic performance. Due to the nature of the work, it is difficult to observe queues and product work inventory - there are no physical signs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Better to provide a &lt;strong&gt;capacity buffer&lt;/strong&gt; in processes that are highly variable - e.g. Google 20% days. Easy to say, not so easy to implement!  Better to target teams and managers on productive outcome rather than high resource utilisation.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;reduction in active work&lt;/strong&gt; can help to sharpen focus, as can &lt;strong&gt;making WIP visible&lt;/strong&gt;. &lt;strong&gt;Reducing batch size&lt;/strong&gt; cuts WIP and speeds up feedback which improves cycle time, quality and efficiency.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Batch size should strike a good balance between &lt;strong&gt;transaction costs and holding costs&lt;/strong&gt;. In software/product development, this is the difference between large batches of code every few months to testing smaller batches a few times a day.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Product work is highly variable and so trying to obstinately follow a plan is not appropriate. Plans should be treated as &lt;strong&gt;hypotheses&lt;/strong&gt; that are subject to &lt;strong&gt;continuous evolution as we continuously learn&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Less can be more&lt;/strong&gt;. ‘Simplicity is the ultimate sophistication’ - Leonardo da Vinci.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Problem definition is the hardest and most important part of the innovation process. &lt;strong&gt;Invest time here&lt;/strong&gt; as it sets good context for everything that follows.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Users usually want a solution that &lt;strong&gt;‘just works’&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The push to ‘get it right first time’ should be replaced with a &lt;strong&gt;tolerance of ‘getting it wrong first time’&lt;/strong&gt;. Getting it wrong early is cheaper than finding a problem much later on when the cake is almost baked.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Product development is not analogous to manufacturing!&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><summary type="html">Product development is not analogous to manufacturing - tasks are (mostly) highly variable and not predictable. Adopting a factory approach to product development is counter-productive.</summary></entry><entry><title type="html">Inspired by Cagan - Book and Workshop (Part 1)</title><link href="http://localhost:4000/Inspired-by-Cagan-Book-and-Workshop/" rel="alternate" type="text/html" title="Inspired by Cagan - Book and Workshop (Part 1)" /><published>2020-06-21T00:00:00+01:00</published><updated>2020-06-21T00:00:00+01:00</updated><id>http://localhost:4000/Inspired by Cagan - Book and Workshop</id><content type="html" xml:base="http://localhost:4000/Inspired-by-Cagan-Book-and-Workshop/">&lt;p&gt;I first came across Marty Cagan’s work in 2010 when I was working on delivery of a new product for the education sector. Product management as a discipline was still very new to me at that time (the product delivery was being led by a US based tech company where it was far better established) and yet when I read his book &lt;a href=&quot;https://www.amazon.co.uk/Inspired-Create-Products-Customers-Love/dp/0981690408/ref=sr_1_2?adgrpid=58662702852&amp;amp;dchild=1&amp;amp;gclid=EAIaIQobChMIqIWPzqaW6gIVWIGyCh2r_wliEAAYAiAAEgLQ6vD_BwE&amp;amp;hvadid=259059665010&amp;amp;hvdev=c&amp;amp;hvlocphy=9045371&amp;amp;hvnetw=g&amp;amp;hvqmt=e&amp;amp;hvrand=18251955675721427072&amp;amp;hvtargid=kwd-312525726860&amp;amp;hydadcr=24427_1748929&amp;amp;keywords=inspired+marty+cagan&amp;amp;qid=1592859118&amp;amp;sr=8-2&amp;amp;tag=googhydr-21&quot;&gt;Inspired (first edition)&lt;/a&gt;, it all made so much sense.&lt;/p&gt;

&lt;p&gt;I devoured all the articles he and his colleagues at SVPG put up on their &lt;a href=&quot;https://svpg.com/&quot;&gt;website&lt;/a&gt; and a lot of what I learned in those formative years still have a strong bearing on how I approach product work today, 10 years later.&lt;/p&gt;

&lt;p&gt;In this post I will share my key takeaways from the &lt;a href=&quot;https://www.amazon.co.uk/Inspired-Create-Tech-Products-Customers/dp/1119387507/ref=sr_1_1?adgrpid=58662702852&amp;amp;dchild=1&amp;amp;gclid=CjwKCAjwrcH3BRApEiwAxjdPTRr8JbfUduHZLKp5WcA-Xi_ucKkNXyewHTvSjria-kvSVbq1OamGShoC-S8QAvD_BwE&amp;amp;hvadid=259059663279&amp;amp;hvdev=c&amp;amp;hvlocphy=9045371&amp;amp;hvnetw=g&amp;amp;hvqmt=e&amp;amp;hvrand=3068208009696466480&amp;amp;hvtargid=kwd-312525726860&amp;amp;hydadcr=24427_1816075&amp;amp;keywords=inspired+marty+cagan&amp;amp;qid=1592857942&amp;amp;sr=8-1&amp;amp;tag=googhydr-21&quot;&gt;second edition&lt;/a&gt; of Cagan’s Inspired book and his ‘How to Create Products Customers Love’ workshop that I attended recently in London. For anyone involved in Product Management I &lt;strong&gt;HIGHLY&lt;/strong&gt; recommend you read/listen to the book and if possible, book yourself on to one of his workshops - both are worth every penny. For a flavour, here is a link to a great talk of his on &lt;a href=&quot;https://youtu.be/9dccd8lihpQ&quot;&gt;YouTube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;book-part-1-lessons-from-top-tech-companies&quot;&gt;BOOK PART 1: Lessons from top tech companies&lt;/h4&gt;

&lt;p&gt;Cagan opens by sharing an anecdote from his early career which saw his team deliver a release to market. Despite much internal fanfare and celebration, it failed to register any impact with the market. This is a prelude to a lot of what comes next - how to avoid such disappointmment by maximising our chances of discovering then delivering product that &lt;strong&gt;customers actually want&lt;/strong&gt; and avoid wasting our time delivering product that does not deliver value (after all, life is too short to deliver poor products).&lt;/p&gt;

&lt;p&gt;A serious challenge in delivering valuable products to customers is the process by which the vast majority of companies goes about it. This process seems predicated on some false beliefs&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;We know what our customers want (we often don’t)&lt;/li&gt;
  &lt;li&gt;We can accurately provide business case estimates upfront regarding how much it will cost us to deliver the product, and what the return on investment will be (we often can’t)&lt;/li&gt;
  &lt;li&gt;Most of the initiatives on our roadmap will deliver the outputs that our business needs (most won’t)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
In reality, Cagan challenges, we cannot reliably provide upfront estimes of cost and ROI (how can we know what we don’t know?)and most of our ideas will not deliver the outcomes we hoped for. By following such a process we are wasting time and effort that could have been invested in more fruitful initiatives (the opportunity cost).&lt;/p&gt;

&lt;p&gt;Cagan argues that the most successful companies are those that look past specific Agile implementations and instead adopt some of the more fundamental principes that underpin these movements. These principles are central to Cagan’s recommended approach to product management:-&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Address risk early&lt;/strong&gt; - value, usability, feasibility, viability risks&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Define and design collaboratively&lt;/strong&gt; - Product Management, UX, Engineering&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Solve problems to deliver outcomes (not outputs)&lt;/strong&gt; - how will we know we’ve been successful?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
Cagan boils down his recommended process into two key phases&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;blog-image&quot; src=&quot;https://robertdpowell.github.io/rp_blog/img/discovery_delivery.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Discovery&lt;/strong&gt; - where we discover the product to be built by addressing the four types of risk to arrive at ideas worth pursuing&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Delivery&lt;/strong&gt; - where we build and deliver the product ideas we validated in Discovery to achieve product/market fit and deliver against our product strategy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
We’ll explore some of these ideas further in the next post in this series.&lt;/p&gt;</content><summary type="html">I first came across Marty Cagan’s work in 2010 when I was working on delivery of a new product for the education sector. Product management as a discipline was still very new to me at that time (the product delivery was being led by a US based tech company where it was far better established) and yet when I read his book Inspired (first edition), it all made so much sense.</summary></entry><entry><title type="html">Advanced Deployment Pipeline Techniques</title><link href="http://localhost:4000/Advanced-Pipeline-Techniques/" rel="alternate" type="text/html" title="Advanced Deployment Pipeline Techniques" /><published>2020-06-08T00:00:00+01:00</published><updated>2020-06-08T00:00:00+01:00</updated><id>http://localhost:4000/Advanced Pipeline Techniques</id><content type="html" xml:base="http://localhost:4000/Advanced-Pipeline-Techniques/">&lt;p&gt;Jez Humble and Dave Farley’s ‘Continuous Delivery’ book first introduced me to many of the concepts around Lean IT, continuous integration and the deployment pipeline. It remains a permanent fixture on my office desk and I dip into it regularly, both for inspiration and for pointers on how to tackle specific challenges. Dave Farley has been quite active on Twitter recently (and &lt;a href=&quot;https://www.youtube.com/channel/UCCfqyGl3nq_V0bo64CjZh8g&quot;&gt;YouTube&lt;/a&gt;) and it was his feed where I saw this ‘Advanced Deployment Pipeline Techniques’ masterclass advertised. Without much hesitation, I enrolled myself and two of my team on to the course.&lt;/p&gt;

&lt;p&gt;This one day course, delivered live online, consisted of four 60-90 minute sessions, each focusing on a particular Continuous Delivery theme/topic. At the start of the day, Dave asked the participants what specifically they were hoping to get out of the course and used our answers to inform some of the day’s topics.&lt;/p&gt;

&lt;p&gt;For us, the topics chosen were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CD pipeline fundamentals&lt;/li&gt;
  &lt;li&gt;The anatomy of the CD pipeline&lt;/li&gt;
  &lt;li&gt;Infrastructure as Code and the pipeline&lt;/li&gt;
  &lt;li&gt;Managing data as part of the pipeline&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Items 3 and 4 were/are top of my list of topics to learn more about and where I need to focus some attention in my current role, so I was very glad that they were included.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;my-3-main-takeaways&quot;&gt;My 3 Main Takeaways&lt;/h4&gt;
&lt;p&gt;There was a lot of content to go through during the sessions and I’m still reading through my notes and the shared course slides. But the three things that really stuck with me from the course were as follows.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;the-cd-pipeline-as-an-evaluation-machine&quot;&gt;The CD Pipeline as an Evaluation Machine&lt;/h5&gt;

&lt;p&gt;A ‘Pipeline’ can be quite an abstract concept and in my experience, the term means different things to different people. To an engineer on my team, it’s a groovy script file. To a delivery manager it’s the automated deployment process.&lt;/p&gt;

&lt;p&gt;I really liked Dave’s description of the pipeline as an &lt;strong&gt;‘evaluation machine’&lt;/strong&gt;, which we use to test whether or not our release candidates are production ready.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;blog-image&quot; src=&quot;https://robertdpowell.github.io/rp_blog/img/evaluationmachine.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We pump our release candidates into one end of this evaluation machine, and it quickly tells us whether or not we have a viable unit of change that can continue on the path to production.&lt;/p&gt;

&lt;p&gt;This serves as a simple, clear and easily digestable representation of a CD pipeline and I expect I’ll use this in the future to help explain what the pipeline is at 20,000 feet.&lt;/p&gt;

&lt;p&gt;As an ambition, the ‘evaluation machine’ should run in &amp;lt; 5 mins and give us an 80% confidence level in the release candidate. As a whole, the deployment pipeline should run in under 1 hour and therefore it should be possible to trigger it multiple times per day. 
The value of getting to a releasable outcome multiple times a day is so high that we should be doing whatever it takes to achieve it!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;the-cd-pipeline-scope&quot;&gt;The CD Pipeline Scope&lt;/h5&gt;

&lt;p&gt;What is the unit of work that we should push through the pipeline? A feature? All output from one delivery team? A microservice? The whole system? It might indeed be all of these things, but the important factor to consider is that the unit of work is &lt;strong&gt;independently deployable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;blog-image&quot; src=&quot;https://robertdpowell.github.io/rp_blog/img/deploymentscope.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As such, we shoudn’t be deploying our unit of work without any dependent systems or services that our change needs to be tested against. This touches on the topic of systems coupling and dependency management. While monolithic applications have a bad reputation, from a deployment pipeline perspective they have some advantages as we don’t need to worry ourselves with the dependency management challenge. We touched on the topic of bounded contexts and it’s clear that architecture and systems coupling can act as a contraint or enabler for our continuous delivery efforts.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;a-cd-pipeline-for-your-cd-pipeline&quot;&gt;A CD Pipeline for your CD Pipeline&lt;/h5&gt;

&lt;p&gt;Our pipeline itself can be considered a product or service to which we should also apply the principles of Continuous Delivery. As such, we should be storing all pipeline artefacts in version control (source code, config, infra scripts). At any point in time, we should be able to determine which version of our pipeline was used to handle a specific release candidate and we should be able to recreate our pipeline infrastructure from code. And of course, changes we make to the CD pipeline are committed frequently, run against tests in our ‘evalution machine’ and our pipeline engineering team get fast feedback as to whether or not the release candidate is worthy to continue on its journey to production.&lt;/p&gt;</content><summary type="html">Jez Humble and Dave Farley’s ‘Continuous Delivery’ book first introduced me to many of the concepts around Lean IT, continuous integration and the deployment pipeline. It remains a permanent fixture on my office desk and I dip into it regularly, both for inspiration and for pointers on how to tackle specific challenges. Dave Farley has been quite active on Twitter recently (and YouTube) and it was his feed where I saw this ‘Advanced Deployment Pipeline Techniques’ masterclass advertised. Without much hesitation, I enrolled myself and two of my team on to the course.</summary></entry></feed>
